*****************************************微服务概述*****************************************************
一、微服务是什么：
微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务
提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够
自行单独启动或销毁，拥有自己独立的数据库。

二、微服务与微服务架构
1、微服务
强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，
可以看做Eclipse里面的一个个微服务工程或者Module
2、微服务架构
微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，
每个服务运行在其独立的、自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。服务之间
采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体的业务展开构建，
并且能够独立的部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体
的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式
管理来协调这些服务，也可以使用不同的数据存储。

三、微服务的优缺点
1、优点
每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求
开发简单、开发效率提高，一个服务可能就是专一的只干一件事
微服务能够被小团队单独开发，这个小团队是2到5人开发人员组成
微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或者部署阶段都是独立的
微服务能使用不同的语言开发
易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过集成工具，如Jenkins,Hudson,banboo
微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的成果
微服务允许你利用融合最新技术
微服务只是业务逻辑代码，不会和HTML/CSS或其它界面组件混合
每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库。
2、缺点
开发人员要处理分布式系统的复杂性
多服务运维难度，随着服务的增加，运维的压力也在增大
系统部署依赖
服务间通信成本
数据一致性
系统集成测试
性能监控...

四、微服务的技术栈
服务开发
服务配置与管理
服务注册与发现
服务调用
服务熔断器
负载均衡
服务接口调用
消息队列
服务配置中心管理
服务路由
服务监控

五、SpringBoot 和 SpringCloud
SpringBoot可以离开SpringCloud独立使用开发项目,但是SpringCloud离不开SpringBoot,属于依赖关系。
SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。

六、参考文档
1、https://springcloud.cc/spring-cloud-netflix.html
2、SpringCloud中国社区:http://springcloud.cn
3、SpringCloud中文网：https://springcloud.cc

**********************************************SpringCloud项目搭建*******************************************************
1、创建打包方式为pom的maven工程microservicecloud，引入相关的依赖管理
2、在microservicecloud下创建子项目Maven Module ---> microservicecloud-api
......
**********************************************Eureka相关**************************************************************
1、Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障
转移。服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需
要修改服务调用的配置文件了。功能类似于dubbo的注册中心，比如Zookeeper。

2、Eureka采用了C-S的设计架构，Eureka Server作为服务注册功能的服务器，它是服务注册中心。

3、系统中的其它微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控
系统中各个微服务是否正常运行。SpringCloud的一些其他模块（比如Zuul）就可以通过Eureka Server来发现系统中的其它微服务，并执行
相关的逻辑。

4、Eureka的自我保护机制:
	某时刻某一个微服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存。
默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认是90秒）。但是当
网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了-----因为微服务本身其实是健康的，此时
本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题----当EurekaServer节点在短时间内丢失过多的客户端时（可能发生
了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务
注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该EurekaServer节点会自定退出自我保护模式。
	在自我保护模式中，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，
该EurekaServer节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务
实例。
	SpringCloud中，可以使用 eureka.server.enable-self-preservation = false 禁用自我保护模式。
	
5、服务发现
对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息
controller中注入Bean :
	@Autowired
	private DiscoveryClient client;

	@RequestMapping(value = "/dept/discovery", method = RequestMethod.GET)
	public Object discovery()
	{
		List<String> list = client.getServices();
		System.out.println("**********" + list);

		List<ServiceInstance> srvList = client.getInstances("MICROSERVICECLOUD-DEPT");
		for (ServiceInstance element : srvList) {
			System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"
					+ element.getUri());
		}
		return this.client;
	}
	
	该微服务的主入口类上添加注解：@EnableDiscoveryClient
	
6、集群配置
	创建 microservicecloud-eureka-7002 和 microservicecloud-eureka-7003 maven的子项目
	pom文件添加依赖和 microservicecloud-eureka-7001 完全相同
	主入口类方法完全相同
	host文件中添加映射：
		127.0.0.1  eureka7001.com
		127.0.0.1  eureka7002.com
		127.0.0.1  eureka7003.com
	修改所有EurekaServer项目的application.yml配置文件
	
	server: 
		port: 7001
 
	eureka: 
	  instance:
		hostname: eureka7001.com
	  client: 
		register-with-eureka: false
		fetch-registry: false
		service-url: 
		  # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ 单机版
		  defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/

	*****************************
	
	server: 
		port: 7002
 
	eureka: 
	  instance:
		hostname: eureka7002.com
	  client: 
		register-with-eureka: false
		fetch-registry: false
		service-url: 
		  # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
		  defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/
		  
	*****************************
	
	server: 
		port: 7003
 
	eureka: 
	  instance:
		hostname: eureka7003.com
	  client: 
		register-with-eureka: false
		fetch-registry: false
		service-url: 
		  # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
		  defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/
		  
	修改eureka客户端的配置文件：
	将客户端注册进所有的 EurekaServer 中，修改dept-8001
	eureka:
		client: #客户端注册进eureka服务列表内
			service-url: 
			  #defaultZone: http://localhost:7001/eureka
			  defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
